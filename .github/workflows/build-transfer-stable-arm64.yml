# This workflow builds, tests and releases an Picroft Stable arm64 binary image for Raspberry Pi

name: 'build: picroft stable arm64'

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]

  schedule:
    - cron:  '0 6 * * 0'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build binary images
  build:
    name: picroft stable arm64
    runs-on: ubuntu-latest
    # Skip build if the commit message includes the string '[skip ci]'
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: linux/aarch64

      - name: Install pi-gen required dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update --fix-missing
          sudo apt-get install -y coreutils quilt parted debootstrap zerofree zip dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc jq
          sudo apt-get install -y qemu-user-static qemu-utils
      # Checkout the latest pi-gen repo code
      - name: Checkout the latest release pi-gen repo code
        run: |
          git clone https://github.com/RPi-Distro/pi-gen.git
          pushd pi-gen
          pwd
          ls -al
          popd

      # Copy picroft image build config to pi-gen working dir
      - name: Copy picroft image build config to pi-gen working dir
        run: cp ./config ./pi-gen/config

      # Copy picroft stage script to pi-gen working dir
      - name: Copy picroft stage script to pi-gen working dir
        run: |
          find ./pi-gen-stage-picroft -name "*.sh" -exec chmod +x {} \;
          cp -R ./pi-gen-stage-picroft ./pi-gen/
          ls -al ./pi-gen

      # Mark stage2 image to be skipped for faster build
      - name: Skip stage2 image - Standard Raspbian OS Lite
        run: |
          touch ./pi-gen/stage2/SKIP_IMAGES
      
      - name: Get mycroft-core latest release
        run: echo "BRANCH=`curl -sL https://api.github.com/repos/MycroftAI/mycroft-core/releases/latest | jq -r '.tag_name'`" >> $GITHUB_ENV

      - name: Run pi-gen script
        env:
          CI: true
        run: |
          pwd
          ls -al
          pushd pi-gen
          pwd
          # checkout arm64 branch of 2021-10-30-raspios-bullseye pi-gen release tag
          git checkout c12b1df4ed6416fb0df33ba1731c5b13c1bdbdf8
          # omit image prefix
          sed -i 's/image_//g' ./build.sh 
          ls -al
          sudo -E CLEAN=1 IMG_NAME=picroft-stable-arm64-`echo ${{ env.BRANCH }} | sed 's/release\///g'` ./build.sh -c config
          popd
        
      - name: Check prepared images
        run: |
          ls -al ./pi-gen/deploy

      - name: Zipped image checksum
        run: |
          pushd pi-gen/deploy
          ls -al
          sha256sum *.zip | tee -a `date -I`-picroft-stable-arm64-`echo ${{ env.BRANCH }} | sed 's/release\///g'`.sha256
          ls -al
          popd

      - name: Transfer image
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          local_dir: "./pi-gen/deploy/*.zip ./*.sha256"
          remote_dir: ${{ secrets.DEPLOY_DIR }}
        run: |
          mkdir ~/.ssh
          echo "$remote_key" > ~/.ssh/gh_actions_key
          chmod 600 ~/.ssh/gh_actions_key
          rsync -avzrh --progress --delete -e "ssh -p ${remote_port} -i ~/.ssh/gh_actions_key -o StrictHostKeyChecking=no -o LogLevel=ERROR" ${local_dir} ${remote_user}@${remote_host}:${remote_dir}